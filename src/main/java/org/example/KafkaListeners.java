package org.example;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.logic.MessageRequest;
import org.example.logic.Orders;
import org.example.logic.OrderDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.annotation.TopicPartition;
import org.springframework.stereotype.Component;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Spring, —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–º—ã Kafka –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
@Component
public class KafkaListeners {
    private final ObjectMapper mapper = new ObjectMapper();
    @Autowired
    private OrderDao dao;

    /**
     * –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–º—ã "sushi-bar", —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∞—Ö —Å –Ω–æ–º–µ—Ä–∞–º–∏ "0" –∏ "1"
     * @param data –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∏—Ö –≤ –æ–±—ä–µ–∫—Ç MessageRequest
     * @throws JsonProcessingException
     */
    @KafkaListener(topics = "sushi-bar", groupId = "groupId",
            topicPartitions = {@TopicPartition(topic = "sushi-bar", partitions = {"0", "1"})})
    void listenerSushiAndPizza(String data) throws JsonProcessingException {
        MessageRequest result = mapper.readValue(data, MessageRequest.class);
        Orders orders = new Orders(result.client(), result.type(), result.pay());

        dao.saveToDB(orders);
        System.out.println("–ó–∞–∫–∞–∑ ‚Ññ" + orders.getId() + " —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –µ–≥–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.\n" + "–ö–ª–∏–µ–Ω—Ç: " + orders.getClientName() + ", –¢–æ–≤–∞—Ä: " + orders.getType() + "üç£üçï");
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–º—ã "sushi-bar", —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∞—Ö —Å –Ω–æ–º–µ—Ä–∞–º–∏ "2"
     * @param data –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∏—Ö –≤ –æ–±—ä–µ–∫—Ç MessageRequest
     * @throws JsonProcessingException
     */
    @KafkaListener(topics = "sushi-bar", groupId = "groupId",
            topicPartitions = {@TopicPartition(topic = "sushi-bar", partitions = {"2"})})
    void listenerDifferentOrders(String data) throws JsonProcessingException {
        MessageRequest result = mapper.readValue(data, MessageRequest.class);
        Orders orders = new Orders(result.client(), result.type(), result.pay());

        if (Orders.isOrderCorrect(orders)) {
            dao.saveToDB(orders);
            System.out.println("–ó–∞–∫–∞–∑ ‚Ññ" + orders.getId() + " —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –µ–≥–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.\n" + "–ö–ª–∏–µ–Ω—Ç: " + orders.getClientName() + ", –¢–æ–≤–∞—Ä: " + orders.getType() + "‚ú®");
        }
        else {
            System.out.println("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ . . .");
        }
    }
}
